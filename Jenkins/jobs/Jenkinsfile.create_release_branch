// Job to create release branch

import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException
import java.text.SimpleDateFormat

// Shared libraries, configured in https://ci.senseilabs.com/configure.
// Ref https://jenkins.io/doc/book/pipeline/shared-libraries/
@Library('genome') _
genome = new org.klick.Genome()
githelper = new org.klick.Git()

// Config:
CODE_GITHUB_ORG = 'jeff-zohrab'  // TODO - fix this
CODE_REPO_NAME = 'klick-genome-CI-stub'  // TODO - fix this
SLACK_CHANNEL = 'jenkins-dev-tests'  // TODO - fix this

node('sensei_build') {

  // Create directory (the GitHub plugin directory names are unwieldy,
  // per https://issues.jenkins-ci.org/browse/JENKINS-38706).
  genome.create_dir("c:\\www")
  ws("c:\\www\\genome") {

    try {
      stage('Checkout') {
        checkout()
      }
      stage('Create branch') {
        add_upstream_remote()
        tag = get_latest_develop_UT_tag()
        branch_name = create_release_branch_name()
        echo "Creating release branch from ${tag}"
        bat "git checkout ${tag} -b ${branch_name}"
        bat "git push upstream ${branch_name}"
        post_success_message(branch_name, tag, SLACK_CHANNEL)
      }

      currentBuild.result = 'SUCCESS'

    } // end try
    catch(FlowInterruptedException interruptEx) {
      currentBuild.result = 'ABORTED'
    }
    catch(err) {
      echo "Error: ${err}"
      post_failure_message(err, SLACK_CHANNEL)
      currentBuild.result = 'FAILURE'
    }
    finally {
      cleanWs()
    }
  } // end ws()
}  // end node


///////////////////////////////////////////////////
// Helpers


def checkout() {
  cleanWs()
  checkout_args = [
    workspace_dir: env.WORKSPACE,
    branch_name: 'develop',
    github_org: CODE_GITHUB_ORG,
    repo_name: CODE_REPO_NAME,
    ref_repo_parent_dir: 'c:\\reference_repo',
    creds_id: 'github-ci'
  ]
  githelper.checkout_from_reference_repo(checkout_args)
}


// Some commands may fail, which is annoying but shouldn't be fatal.
def bat_no_fail(command) {
  try { bat command } catch(err) { }
}


def add_upstream_remote() {
  bat_no_fail("git remote remove upstream")
  withCredentials([usernamePassword(credentialsId: 'github-ci', passwordVariable: 'P', usernameVariable: 'U')]) {
    bat "git remote add upstream https://${U}:${P}@github.com/${CODE_GITHUB_ORG}/${CODE_REPO_NAME}.git"
  } // end with
}


def create_release_branch_from_tag(tag) {
  branch_name = create_release_branch_name()
  bat "git checkout ${tag} -b ${branch_name}"
  bat "git push upstream ${branch_name}"
}


def create_release_branch_name() {
  def dateFormat = new SimpleDateFormat("yyyyMMdd")
  def date = new Date()
  return "release-${dateFormat.format(date)}"
}


def get_latest_develop_UT_tag() {
  // Ref https://git-scm.com/docs/git-fetch#git-fetch-ltrefspecgt and
  // https://git-scm.com/docs/git-fetch#_examples for notes on "+develop:develop"
  bat "git fetch --progress --shallow-since=3weeks upstream +develop:develop"
  t = latest_tag_matching('develop', /^UT_\d+/)
  echo "Got tag: ${t}"
  return t
}


// Returns the latest tag matching the regex.
def latest_tag_matching(current_branch, tag_regex) {

  // "--merged" only includes tags reachable from the specified branch.
  // ref https://stackoverflow.com/questions/2381665/list-tags-contained-by-a-branch
  def all_tags = bat(returnStdout: true, script: "git tag --merged ${current_branch}")
  // echo all_tags

  candidates = all_tags.
    split("\n").
    collect { s -> s.trim() }.
    findAll { s -> s =~ tag_regex }.
    sort().
    reverse()
  
  // echo "Candidates: ${candidates}"
  // echo "Latest: ${candidates[0]}"

  if (candidates.size() == 0) {
    echo "No tag matching ${tag_regex} found in ${current_branch}"
    return null
  }
  else {
    def t = candidates[0]
    echo "Tag ${t} found in ${current_branch}"
    return t
  }
}


def post_success_message(branch_name, tag_name, slack_channel) {
  def msg = """*Release branch ${branch_name} created*
Created from tag ${tag_name}

${env.Job_URL} (number ${currentBuild.number})"""
  send_slack_message(slack_channel, '#008000', msg)
}

def notify_slack_channel_failure(err, slack_channel) {
   def msg = """*Launch branch creation failed:

 ${err}

 ${env.Job_URL} (number ${currentBuild.number})"""
  send_slack_message(slack_channel, '#ff0000', msg)
}


def send_slack_message(slack_channel, color_hex_code, formatted_message) {
  def use_channel = '#' + slack_channel
  slackSend channel: use_channel,
    color: color_hex_code,
    message: formatted_message,
    teamDomain: 'senseilabs',
    tokenCredentialId: 'senseilabs-slack-token'
}
